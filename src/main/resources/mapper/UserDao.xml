<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wl.college.dao.UserDao">

    <!-- 插入并返回自增ID -->
    <insert id="createUser" useGeneratedKeys="true" keyProperty="user.id">
        INSERT INTO _user (name, password, email, phone)
        VALUES (#{user.name,jdbcType=VARCHAR},
                #{user.password,jdbcType=VARCHAR},
                #{user.email,jdbcType=VARCHAR},
                #{user.phone,jdbcType=VARCHAR})
    </insert>

    <!-- 根据ID更新 -->
    <update id="updateUser">
        UPDATE _user u
        <set>
            <if test="user.name != null">
                u.name = #{user.name,jdbcType=VARCHAR},
            </if>
            <if test="user.password != null">
                u.password = #{user.password,jdbcType=VARCHAR},
            </if>
            <if test="user.email != null">
                u.email = #{user.email,jdbcType=VARCHAR},
            </if>
            <if test="user.phone != null">
                u.phone = #{user.phone,jdbcType=VARCHAR},
            </if>
            <if test="user.state != null">
                u.state = #{user.state,jdbcType=VARCHAR},
            </if>
        </set>
        where u.id = #{user.id,jdbcType=INTEGER}
        AND u.update_time = #{user.updateTime,jdbcType=TIMESTAMP};
    </update>

    <!-- 根据ID删除 -->
    <delete id="deleteUser">
        DELETE FROM _user
        WHERE id = #{id,jdbcType=INTEGER};
    </delete>

    <!--查询user列表-->
    <select id="findSome" resultType="com.wl.college.entity.User">
        SELECT DISTINCT
            u.id, u.name, u.email, u.phone, u.state, u.create_time, u.update_time
        FROM _user u, _user_role ur, _role r
        WHERE 1=1
        <if test="user.id != null">
            AND u.id = #{user.id,jdbcType=INTEGER}
        </if>
        <if test="user.name != null">
            AND u.name = #{user.name ,jdbcType=VARCHAR}
        </if>
        <if test="user.email != null">
            AND u.email = #{user.email,jdbcType=VARCHAR}
        </if>
        <if test="user.phone != null">
            AND u.phone = #{user.phone,jdbcType=VARCHAR}
        </if>
        <if test="role != null">
            AND r.alias = #{role} AND r.id = ur.role_id AND ur.user_id = u.id
        </if>
        ORDER BY u.id DESC
        LIMIT #{offset,jdbcType=INTEGER},#{limit,jdbcType=INTEGER};
    </select>

    <select id="findPermissionsAliasById" resultType="java.lang.String">
        SELECT p.alias
        FROM _permission p
        JOIN _role_permission rp
        ON p.id=rp.permission_id
        WHERE rp.role_id
        IN(SELECT role_id FROM _user_role ur JOIN _user u ON ur.user_id=u.id WHERE u.id = #{id,jdbcType=INTEGER});
    </select>

    <select id="findById" resultType="com.wl.college.entity.User">
        SELECT *
        FROM _user
        WHERE id = #{id,jdbcType=INTEGER} LIMIT 1;
    </select>

    <select id="findByIds" resultType="com.wl.college.entity.User">
        SELECT * FROM _user
        WHERE id IN
        <foreach collection="array" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <select id="findPermissionsNameById" resultType="java.lang.String">
        SELECT p.name
        FROM _permission p
        JOIN _role_permission rp
        ON p.id=rp.permission_id
        WHERE rp.role_id
        IN(SELECT role_id FROM _user_role ur JOIN _user u ON ur.user_id=u.id WHERE u.id = #{id,jdbcType=INTEGER});
    </select>


    <!--根据userId找到role.name的集合-->
    <select id="findRoleNamesByUserId" resultType="java.lang.String">
          SELECT r.name FROM _role r
          JOIN _user_role ur ON ur.role_id = r.id
          WHERE ur.user_id = #{userId}
    </select>


    <select id="findRoleIdsByUserId" resultType="java.lang.Integer">
        SELECT role_id
        FROM _user_role
        WHERE user_id = ${userId}
    </select>


    <insert id="createUserRole">
        INSERT INTO _user_role(user_id, role_id)
        VALUES
        <foreach collection="roleList" item="item" separator="," >
            (#{userId,jdbcType=INTEGER},#{item})
        </foreach>
    </insert>

    <delete id="deleteUserRole">
        DELETE FROM _user_role
        WHERE user_id = #{userId,jdbcType=INTEGER}
    </delete>

    <update id="banState">
        UPDATE _user SET state = #{state}
        WHERE id = #{id}
    </update>


    <update id="updateState">
        UPDATE _user
        SET state = #{state}
        WHERE id = #{userId}
    </update>


</mapper>